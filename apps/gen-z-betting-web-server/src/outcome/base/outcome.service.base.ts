/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Outcome as PrismaOutcome,
  Bet as PrismaBet,
} from "@prisma/client";

export class OutcomeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.OutcomeCountArgs, "select">): Promise<number> {
    return this.prisma.outcome.count(args);
  }

  async outcomes(args: Prisma.OutcomeFindManyArgs): Promise<PrismaOutcome[]> {
    return this.prisma.outcome.findMany(args);
  }
  async outcome(
    args: Prisma.OutcomeFindUniqueArgs
  ): Promise<PrismaOutcome | null> {
    return this.prisma.outcome.findUnique(args);
  }
  async createOutcome(args: Prisma.OutcomeCreateArgs): Promise<PrismaOutcome> {
    return this.prisma.outcome.create(args);
  }
  async updateOutcome(args: Prisma.OutcomeUpdateArgs): Promise<PrismaOutcome> {
    return this.prisma.outcome.update(args);
  }
  async deleteOutcome(args: Prisma.OutcomeDeleteArgs): Promise<PrismaOutcome> {
    return this.prisma.outcome.delete(args);
  }

  async findBets(
    parentId: string,
    args: Prisma.BetFindManyArgs
  ): Promise<PrismaBet[]> {
    return this.prisma.outcome
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bets(args);
  }
}
